package com.truck.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DButil {
	public static Connection getConnection() {
		String username = "root";
		String password = "123456";
		String url = "jdbc:mysql://localhost:3306/diditruck";
		Connection con = null;
		try {
			Class.forName("com.mysql.jdbc.Driver");
			con = DriverManager.getConnection(url, username, password);
		} catch (ClassNotFoundException e) {
			System.out.println("类没有找到异常！");
		} catch (SQLException e) {
			System.out.println("数据库异常");
		}

		return con;
	}

	public static void close(Connection con) {
		try {
			if (con != null)
				con.close();
		} catch (SQLException e) {
			e.getStackTrace();
		}
	}

	public static void close(PreparedStatement ps) {
		try {
			if (ps != null)
				ps.close();
		} catch (SQLException e) {
			e.getStackTrace();
		}
	}

	public static void close(ResultSet rs) {
		try {
			if (rs != null)
				rs.close();
		} catch (SQLException e) {
			e.getStackTrace();
		}
	}

	public static Statement createStatement(Connection conn) {
		/*
		 * 获取Statement对象
		 */
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
		} catch (SQLException e) {
			System.out.println("获取Statemnt对象失败！");
			e.printStackTrace();
		}
		return stmt;
	}

	public static PreparedStatement prepareStatement(Connection conn, String sql) {
		/*
		 * 获取PreparedStatement对象
		 */
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			System.out.println("获取PreparedStatement对象失败!");
			e.printStackTrace();
		}
		return pstmt;
	}

	public static PreparedStatement prepareStatement(Connection conn,
			String sql, int autoGeneratedKeys) {
		/*
		 * 获取PreparedStatement对象
		 */
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			System.out.println("返回preparedStatement对象失败!");
			e.printStackTrace();
		}
		return pstmt;
	}

	public static void executeUpdate(Connection conn, String sql) {
		Statement stmt = DButil.createStatement(conn);
		try {
			stmt.executeUpdate(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(stmt);
		}
	}

	public static void close(Statement stmt) {

		if (stmt != null) {
			try {
				stmt.close();
				stmt = null;
			} catch (SQLException e) {
				System.out.println("关闭Statement失败！");
				e.printStackTrace();
			} finally {
				stmt = null;
			}
		}
	}

	public static ResultSet executeQuery(Statement stmt, String sql) {
		ResultSet rs = null;
		try {
			rs = stmt.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rs;
	}

}
